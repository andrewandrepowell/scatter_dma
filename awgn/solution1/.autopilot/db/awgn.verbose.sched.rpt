

================================================================
== Vivado HLS Report for 'awgn'
================================================================
* Date:           Sun Sep 18 17:58:51 2016

* Version:        2016.2 (Build 1577090 on Thu Jun 02 16:59:10 MDT 2016)
* Project:        awgn
* Solution:       solution1
* Product family: artix7
* Target device:  xc7a100tcsg324-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|      8.66|        1.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |    ?|    ?|    ?|    ?|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +----------+-----+-----+----------+-----------+-----------+------+----------+
        |          |  Latency  | Iteration|  Initiation Interval  | Trip |          |
        | Loop Name| min | max |  Latency |  achieved |   target  | Count| Pipelined|
        +----------+-----+-----+----------+-----------+-----------+------+----------+
        |- Loop 1  |    ?|    ?|        29|          -|          -|     ?|    no    |
        +----------+-----+-----+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 156
* Pipeline: 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	156  / (!enable_read)
	2  / (enable_read & !store_val_load)
	14  / (enable_read & store_val_load)
2 --> 
	3  / true
3 --> 
	4  / true
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	7  / true
7 --> 
	8  / true
8 --> 
	9  / true
9 --> 
	10  / true
10 --> 
	11  / true
11 --> 
	12  / true
12 --> 
	13  / true
13 --> 
	156  / true
14 --> 
	15  / true
15 --> 
	16  / true
16 --> 
	17  / true
17 --> 
	18  / true
18 --> 
	19  / true
19 --> 
	20  / true
20 --> 
	21  / true
21 --> 
	22  / true
22 --> 
	23  / true
23 --> 
	24  / true
24 --> 
	25  / true
25 --> 
	26  / true
26 --> 
	27  / true
27 --> 
	28  / true
28 --> 
	29  / true
29 --> 
	30  / true
30 --> 
	31  / true
31 --> 
	32  / true
32 --> 
	33  / true
33 --> 
	34  / true
34 --> 
	35  / true
35 --> 
	36  / true
36 --> 
	37  / true
37 --> 
	38  / true
38 --> 
	39  / true
39 --> 
	40  / true
40 --> 
	41  / true
41 --> 
	42  / true
42 --> 
	14  / (tmp_23)
	43  / (!tmp_23)
43 --> 
	44  / true
44 --> 
	45  / true
45 --> 
	46  / true
46 --> 
	47  / true
47 --> 
	48  / true
48 --> 
	49  / true
49 --> 
	50  / true
50 --> 
	51  / true
51 --> 
	52  / true
52 --> 
	53  / true
53 --> 
	54  / true
54 --> 
	55  / true
55 --> 
	56  / true
56 --> 
	57  / true
57 --> 
	58  / true
58 --> 
	59  / true
59 --> 
	60  / true
60 --> 
	61  / true
61 --> 
	62  / true
62 --> 
	63  / true
63 --> 
	64  / true
64 --> 
	65  / true
65 --> 
	66  / true
66 --> 
	67  / true
67 --> 
	68  / true
68 --> 
	69  / true
69 --> 
	70  / true
70 --> 
	71  / true
71 --> 
	72  / true
72 --> 
	73  / true
73 --> 
	74  / true
74 --> 
	75  / true
75 --> 
	76  / true
76 --> 
	77  / true
77 --> 
	78  / true
78 --> 
	79  / true
79 --> 
	80  / true
80 --> 
	81  / true
81 --> 
	82  / true
82 --> 
	83  / true
83 --> 
	84  / true
84 --> 
	85  / true
85 --> 
	86  / true
86 --> 
	87  / true
87 --> 
	88  / true
88 --> 
	89  / true
89 --> 
	90  / true
90 --> 
	91  / true
91 --> 
	92  / true
92 --> 
	93  / true
93 --> 
	94  / true
94 --> 
	95  / true
95 --> 
	96  / true
96 --> 
	97  / true
97 --> 
	98  / true
98 --> 
	99  / true
99 --> 
	100  / true
100 --> 
	101  / true
101 --> 
	102  / true
102 --> 
	103  / true
103 --> 
	104  / true
104 --> 
	105  / true
105 --> 
	106  / true
106 --> 
	107  / true
107 --> 
	108  / true
108 --> 
	109  / true
109 --> 
	110  / true
110 --> 
	111  / true
111 --> 
	112  / true
112 --> 
	113  / true
113 --> 
	114  / true
114 --> 
	115  / true
115 --> 
	116  / true
116 --> 
	117  / true
117 --> 
	118  / true
118 --> 
	119  / true
119 --> 
	120  / true
120 --> 
	121  / true
121 --> 
	122  / true
122 --> 
	123  / true
123 --> 
	124  / true
124 --> 
	125  / true
125 --> 
	126  / true
126 --> 
	127  / true
127 --> 
	128  / true
128 --> 
	129  / true
129 --> 
	130  / true
130 --> 
	131  / true
131 --> 
	132  / true
132 --> 
	133  / true
133 --> 
	134  / true
134 --> 
	135  / true
135 --> 
	136  / true
136 --> 
	137  / true
137 --> 
	138  / true
138 --> 
	139  / true
139 --> 
	140  / true
140 --> 
	141  / true
141 --> 
	142  / true
142 --> 
	143  / true
143 --> 
	144  / true
144 --> 
	145  / true
145 --> 
	146  / true
146 --> 
	147  / true
147 --> 
	148  / true
148 --> 
	149  / true
149 --> 
	150  / true
150 --> 
	151  / true
151 --> 
	152  / true
152 --> 
	153  / true
153 --> 
	154  / true
154 --> 
	155  / true
155 --> 
	156  / true
156 --> 
* FSM state operations: 

 <State 1>: 6.18ns
ST_1: stg_157 [1/1] 0.00ns
:0  call void (...)* @_ssdm_op_SpecBitsMap(i16 %input_axis) nounwind, !map !20

ST_1: stg_158 [1/1] 0.00ns
:1  call void (...)* @_ssdm_op_SpecBitsMap(i16* %output_axis) nounwind, !map !26

ST_1: stg_159 [1/1] 0.00ns
:2  call void (...)* @_ssdm_op_SpecBitsMap(i32* %stdd) nounwind, !map !30

ST_1: stg_160 [1/1] 0.00ns
:3  call void (...)* @_ssdm_op_SpecBitsMap(i1* %enable) nounwind, !map !34

ST_1: stg_161 [1/1] 0.00ns
:4  call void (...)* @_ssdm_op_SpecTopModule([5 x i8]* @awgn_str) nounwind

ST_1: input_axis_read [1/1] 0.00ns
:5  %input_axis_read = call i16 @_ssdm_op_Read.axis.i16(i16 %input_axis) nounwind

ST_1: stg_163 [1/1] 0.00ns
:6  call void (...)* @_ssdm_op_SpecInterface(i16 %input_axis, [5 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [11 x i8]* @p_str1, [1 x i8]* @p_str2, [1 x i8]* @p_str2, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str2) nounwind

ST_1: stg_164 [1/1] 0.00ns
:7  call void (...)* @_ssdm_op_SpecInterface(i16* %output_axis, [5 x i8]* @p_str, i32 0, i32 0, i32 0, i32 0, [12 x i8]* @p_str3, [1 x i8]* @p_str2, [1 x i8]* @p_str2, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str2) nounwind

ST_1: stg_165 [1/1] 0.00ns
:8  call void (...)* @_ssdm_op_SpecInterface(i32* %stdd, [10 x i8]* @p_str4, i32 0, i32 0, i32 0, i32 0, [13 x i8]* @p_str5, [1 x i8]* @p_str2, [1 x i8]* @p_str2, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str2) nounwind

ST_1: stg_166 [1/1] 0.00ns
:9  call void (...)* @_ssdm_op_SpecInterface(i1* %enable, [10 x i8]* @p_str4, i32 0, i32 0, i32 0, i32 0, [13 x i8]* @p_str5, [1 x i8]* @p_str2, [1 x i8]* @p_str2, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str2) nounwind

ST_1: stg_167 [1/1] 0.00ns
:10  call void (...)* @_ssdm_op_SpecInterface(i32 0, [10 x i8]* @p_str4, i32 0, i32 0, i32 0, i32 0, [13 x i8]* @p_str5, [1 x i8]* @p_str2, [1 x i8]* @p_str2, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str2) nounwind

ST_1: enable_read [1/1] 1.00ns
:11  %enable_read = call i1 @_ssdm_op_Read.s_axilite.i1P(i1* %enable) nounwind

ST_1: stg_169 [1/1] 0.00ns
:12  br i1 %enable_read, label %1, label %3

ST_1: stg_170 [1/1] 0.00ns
:0  call void @_ssdm_op_Write.axis.i16P(i16* %output_axis, i16 %input_axis_read) nounwind

ST_1: stg_171 [1/1] 0.00ns
:1  br label %4

ST_1: store_val_load [1/1] 0.00ns
:0  %store_val_load = load i1* @store_val, align 1

ST_1: stg_173 [1/1] 0.00ns
:1  br i1 %store_val_load, label %.preheader.preheader, label %_ifconv

ST_1: tmp_1 [1/1] 0.00ns
_ifconv:0  %tmp_1 = sext i16 %input_axis_read to i32

ST_1: tmp_s [6/6] 6.18ns
_ifconv:1  %tmp_s = sitofp i32 %tmp_1 to float

ST_1: cur_load [1/1] 0.00ns
.preheader.preheader:0  %cur_load = load i16* @cur, align 2

ST_1: stg_177 [1/1] 1.57ns
.preheader.preheader:1  br label %.preheader


 <State 2>: 6.18ns
ST_2: tmp_s [5/6] 6.18ns
_ifconv:1  %tmp_s = sitofp i32 %tmp_1 to float


 <State 3>: 6.18ns
ST_3: tmp_s [4/6] 6.18ns
_ifconv:1  %tmp_s = sitofp i32 %tmp_1 to float


 <State 4>: 6.18ns
ST_4: tmp_s [3/6] 6.18ns
_ifconv:1  %tmp_s = sitofp i32 %tmp_1 to float


 <State 5>: 6.18ns
ST_5: tmp_s [2/6] 6.18ns
_ifconv:1  %tmp_s = sitofp i32 %tmp_1 to float


 <State 6>: 6.18ns
ST_6: tmp_s [1/6] 6.18ns
_ifconv:1  %tmp_s = sitofp i32 %tmp_1 to float


 <State 7>: 8.26ns
ST_7: store_g_load [1/1] 0.00ns
_ifconv:2  %store_g_load = load float* @store_g, align 4

ST_7: x_assign_2 [5/5] 8.26ns
_ifconv:3  %x_assign_2 = fadd float %tmp_s, %store_g_load


 <State 8>: 8.26ns
ST_8: x_assign_2 [4/5] 8.26ns
_ifconv:3  %x_assign_2 = fadd float %tmp_s, %store_g_load


 <State 9>: 8.26ns
ST_9: x_assign_2 [3/5] 8.26ns
_ifconv:3  %x_assign_2 = fadd float %tmp_s, %store_g_load


 <State 10>: 8.26ns
ST_10: x_assign_2 [2/5] 8.26ns
_ifconv:3  %x_assign_2 = fadd float %tmp_s, %store_g_load


 <State 11>: 8.26ns
ST_11: x_assign_2 [1/5] 8.26ns
_ifconv:3  %x_assign_2 = fadd float %tmp_s, %store_g_load


 <State 12>: 6.30ns
ST_12: p_Val2_s [1/1] 0.00ns
_ifconv:4  %p_Val2_s = bitcast float %x_assign_2 to i32

ST_12: p_Result_2 [1/1] 0.00ns
_ifconv:5  %p_Result_2 = call i1 @_ssdm_op_BitSelect.i1.i32.i32(i32 %p_Val2_s, i32 31)

ST_12: loc_V_4 [1/1] 0.00ns
_ifconv:6  %loc_V_4 = call i8 @_ssdm_op_PartSelect.i8.i32.i32.i32(i32 %p_Val2_s, i32 23, i32 30) nounwind

ST_12: loc_V_5 [1/1] 0.00ns
_ifconv:7  %loc_V_5 = trunc i32 %p_Val2_s to i23

ST_12: p_Result_3 [1/1] 0.00ns
_ifconv:8  %p_Result_3 = call i24 @_ssdm_op_BitConcatenate.i24.i1.i23(i1 true, i23 %loc_V_5) nounwind

ST_12: tmp_i_i1 [1/1] 0.00ns (grouped into LUT with out node p_Val2_3)
_ifconv:9  %tmp_i_i1 = zext i24 %p_Result_3 to i62

ST_12: tmp_i_i_i1_cast5 [1/1] 0.00ns
_ifconv:10  %tmp_i_i_i1_cast5 = zext i8 %loc_V_4 to i9

ST_12: sh_assign [1/1] 1.67ns
_ifconv:11  %sh_assign = add i9 -127, %tmp_i_i_i1_cast5

ST_12: isNeg [1/1] 0.00ns
_ifconv:12  %isNeg = call i1 @_ssdm_op_BitSelect.i1.i9.i32(i9 %sh_assign, i32 8)

ST_12: tmp_1_i_i1 [1/1] 1.67ns
_ifconv:13  %tmp_1_i_i1 = sub i8 127, %loc_V_4

ST_12: tmp_1_i_i1_cast [1/1] 0.00ns
_ifconv:14  %tmp_1_i_i1_cast = sext i8 %tmp_1_i_i1 to i9

ST_12: sh_assign_1 [1/1] 1.37ns
_ifconv:15  %sh_assign_1 = select i1 %isNeg, i9 %tmp_1_i_i1_cast, i9 %sh_assign

ST_12: sh_assign_1_cast [1/1] 0.00ns (grouped into LUT with out node p_Val2_3)
_ifconv:16  %sh_assign_1_cast = sext i9 %sh_assign_1 to i32

ST_12: sh_assign_1_cast_cast [1/1] 0.00ns (grouped into LUT with out node p_Val2_3)
_ifconv:17  %sh_assign_1_cast_cast = sext i9 %sh_assign_1 to i24

ST_12: tmp_2_i_i1 [1/1] 0.00ns (grouped into LUT with out node p_Val2_3)
_ifconv:18  %tmp_2_i_i1 = zext i32 %sh_assign_1_cast to i62

ST_12: tmp_3_i_i1 [1/1] 0.00ns (grouped into LUT with out node p_Val2_3)
_ifconv:19  %tmp_3_i_i1 = lshr i24 %p_Result_3, %sh_assign_1_cast_cast

ST_12: tmp_5_i_i1 [1/1] 0.00ns (grouped into LUT with out node p_Val2_3)
_ifconv:20  %tmp_5_i_i1 = shl i62 %tmp_i_i1, %tmp_2_i_i1

ST_12: tmp [1/1] 0.00ns (grouped into LUT with out node p_Val2_3)
_ifconv:21  %tmp = call i1 @_ssdm_op_BitSelect.i1.i24.i32(i24 %tmp_3_i_i1, i32 23)

ST_12: tmp_20 [1/1] 0.00ns (grouped into LUT with out node p_Val2_3)
_ifconv:22  %tmp_20 = zext i1 %tmp to i16

ST_12: tmp_24 [1/1] 0.00ns (grouped into LUT with out node p_Val2_3)
_ifconv:23  %tmp_24 = call i16 @_ssdm_op_PartSelect.i16.i62.i32.i32(i62 %tmp_5_i_i1, i32 23, i32 38)

ST_12: p_Val2_3 [1/1] 3.26ns (out node of the LUT)
_ifconv:24  %p_Val2_3 = select i1 %isNeg, i16 %tmp_20, i16 %tmp_24


 <State 13>: 4.85ns
ST_13: p_Val2_7_i_i1 [1/1] 1.91ns
_ifconv:25  %p_Val2_7_i_i1 = sub i16 0, %p_Val2_3

ST_13: p_Val2_5 [1/1] 1.37ns
_ifconv:26  %p_Val2_5 = select i1 %p_Result_2, i16 %p_Val2_7_i_i1, i16 %p_Val2_3

ST_13: stg_212 [1/1] 1.57ns
_ifconv:27  br label %2


 <State 14>: 7.55ns
ST_14: ret [1/1] 0.00ns
.preheader:0  %ret = phi i16 [ %cur_load, %.preheader.preheader ], [ %tmp_8_i, %.preheader ]

ST_14: tmp_i [1/1] 0.00ns
.preheader:1  %tmp_i = call i14 @_ssdm_op_PartSelect.i14.i16.i32.i32(i16 %ret, i32 2, i32 15)

ST_14: tmp_25 [1/1] 0.00ns
.preheader:2  %tmp_25 = call i1 @_ssdm_op_BitSelect.i1.i16.i32(i16 %ret, i32 3)

ST_14: tmp_26 [1/1] 0.00ns (grouped into LUT with out node tmp_i_8)
.preheader:3  %tmp_26 = call i1 @_ssdm_op_BitSelect.i1.i16.i32(i16 %ret, i32 5)

ST_14: tmp_27 [1/1] 0.00ns (grouped into LUT with out node tmp_i_8)
.preheader:4  %tmp_27 = call i1 @_ssdm_op_BitSelect.i1.i16.i32(i16 %ret, i32 2)

ST_14: tmp_28 [1/1] 0.00ns (grouped into LUT with out node tmp_i_8)
.preheader:5  %tmp_28 = trunc i16 %ret to i1

ST_14: tmp2 [1/1] 0.00ns (grouped into LUT with out node tmp_i_8)
.preheader:6  %tmp2 = xor i1 %tmp_25, %tmp_26

ST_14: tmp_29 [1/1] 0.00ns (grouped into LUT with out node tmp_i_8)
.preheader:7  %tmp_29 = xor i1 %tmp_27, %tmp_28

ST_14: tmp_6_i [1/1] 0.00ns
.preheader:8  %tmp_6_i = call i15 @_ssdm_op_PartSelect.i15.i16.i32.i32(i16 %ret, i32 1, i32 15)

ST_14: tmp_30 [1/1] 0.00ns (grouped into LUT with out node tmp_5_i7)
.preheader:9  %tmp_30 = call i1 @_ssdm_op_BitSelect.i1.i16.i32(i16 %ret, i32 1)

ST_14: tmp_i_8 [1/1] 1.37ns (out node of the LUT)
.preheader:10  %tmp_i_8 = xor i1 %tmp2, %tmp_29

ST_14: ret_1 [1/1] 0.00ns
.preheader:11  %ret_1 = call i16 @_ssdm_op_BitConcatenate.i16.i1.i15(i1 %tmp_i_8, i15 %tmp_6_i)

ST_14: tmp_33 [1/1] 0.00ns
.preheader:12  %tmp_33 = zext i16 %ret to i32

ST_14: tmp_2 [6/6] 6.18ns
.preheader:13  %tmp_2 = uitofp i32 %tmp_33 to float

ST_14: tmp_34 [1/1] 0.00ns (grouped into LUT with out node tmp_5_i7)
.preheader:15  %tmp_34 = call i1 @_ssdm_op_BitSelect.i1.i16.i32(i16 %ret, i32 4)

ST_14: tmp_35 [1/1] 0.00ns (grouped into LUT with out node tmp_5_i7)
.preheader:16  %tmp_35 = call i1 @_ssdm_op_BitSelect.i1.i16.i32(i16 %ret, i32 6)

ST_14: tmp3 [1/1] 0.00ns (grouped into LUT with out node tmp_5_i7)
.preheader:17  %tmp3 = xor i1 %tmp_25, %tmp_30

ST_14: tmp4 [1/1] 0.00ns (grouped into LUT with out node tmp_5_i7)
.preheader:18  %tmp4 = xor i1 %tmp_34, %tmp_35

ST_14: tmp_5_i7 [1/1] 1.37ns (out node of the LUT)
.preheader:19  %tmp_5_i7 = xor i1 %tmp4, %tmp3

ST_14: tmp_36 [1/1] 0.00ns
.preheader:21  %tmp_36 = zext i16 %ret_1 to i32

ST_14: tmp_3 [6/6] 6.18ns
.preheader:22  %tmp_3 = uitofp i32 %tmp_36 to float


 <State 15>: 6.18ns
ST_15: tmp_2 [5/6] 6.18ns
.preheader:13  %tmp_2 = uitofp i32 %tmp_33 to float

ST_15: tmp_3 [5/6] 6.18ns
.preheader:22  %tmp_3 = uitofp i32 %tmp_36 to float


 <State 16>: 6.18ns
ST_16: tmp_2 [4/6] 6.18ns
.preheader:13  %tmp_2 = uitofp i32 %tmp_33 to float

ST_16: tmp_3 [4/6] 6.18ns
.preheader:22  %tmp_3 = uitofp i32 %tmp_36 to float


 <State 17>: 6.18ns
ST_17: tmp_2 [3/6] 6.18ns
.preheader:13  %tmp_2 = uitofp i32 %tmp_33 to float

ST_17: tmp_3 [3/6] 6.18ns
.preheader:22  %tmp_3 = uitofp i32 %tmp_36 to float


 <State 18>: 6.18ns
ST_18: tmp_2 [2/6] 6.18ns
.preheader:13  %tmp_2 = uitofp i32 %tmp_33 to float

ST_18: tmp_3 [2/6] 6.18ns
.preheader:22  %tmp_3 = uitofp i32 %tmp_36 to float


 <State 19>: 6.18ns
ST_19: tmp_2 [1/6] 6.18ns
.preheader:13  %tmp_2 = uitofp i32 %tmp_33 to float

ST_19: tmp_3 [1/6] 6.18ns
.preheader:22  %tmp_3 = uitofp i32 %tmp_36 to float


 <State 20>: 5.78ns
ST_20: u1 [4/4] 5.78ns
.preheader:14  %u1 = fmul float %tmp_2, 0x3EF0000000000000

ST_20: u2 [4/4] 5.78ns
.preheader:23  %u2 = fmul float %tmp_3, 0x3EF0000000000000


 <State 21>: 5.78ns
ST_21: u1 [3/4] 5.78ns
.preheader:14  %u1 = fmul float %tmp_2, 0x3EF0000000000000

ST_21: u2 [3/4] 5.78ns
.preheader:23  %u2 = fmul float %tmp_3, 0x3EF0000000000000


 <State 22>: 5.78ns
ST_22: u1 [2/4] 5.78ns
.preheader:14  %u1 = fmul float %tmp_2, 0x3EF0000000000000

ST_22: u2 [2/4] 5.78ns
.preheader:23  %u2 = fmul float %tmp_3, 0x3EF0000000000000


 <State 23>: 5.78ns
ST_23: u1 [1/4] 5.78ns
.preheader:14  %u1 = fmul float %tmp_2, 0x3EF0000000000000

ST_23: u2 [1/4] 5.78ns
.preheader:23  %u2 = fmul float %tmp_3, 0x3EF0000000000000


 <State 24>: 5.78ns
ST_24: tmp_4 [4/4] 5.78ns
.preheader:24  %tmp_4 = fmul float %u1, 2.000000e+00

ST_24: tmp_5 [4/4] 5.78ns
.preheader:26  %tmp_5 = fmul float %u2, 2.000000e+00


 <State 25>: 5.78ns
ST_25: tmp_4 [3/4] 5.78ns
.preheader:24  %tmp_4 = fmul float %u1, 2.000000e+00

ST_25: tmp_5 [3/4] 5.78ns
.preheader:26  %tmp_5 = fmul float %u2, 2.000000e+00


 <State 26>: 5.78ns
ST_26: tmp_4 [2/4] 5.78ns
.preheader:24  %tmp_4 = fmul float %u1, 2.000000e+00

ST_26: tmp_5 [2/4] 5.78ns
.preheader:26  %tmp_5 = fmul float %u2, 2.000000e+00


 <State 27>: 5.78ns
ST_27: tmp_4 [1/4] 5.78ns
.preheader:24  %tmp_4 = fmul float %u1, 2.000000e+00

ST_27: tmp_5 [1/4] 5.78ns
.preheader:26  %tmp_5 = fmul float %u2, 2.000000e+00


 <State 28>: 8.26ns
ST_28: u1_1 [5/5] 8.26ns
.preheader:25  %u1_1 = fadd float %tmp_4, -1.000000e+00

ST_28: u2_1 [5/5] 8.26ns
.preheader:27  %u2_1 = fadd float %tmp_5, -1.000000e+00


 <State 29>: 8.26ns
ST_29: u1_1 [4/5] 8.26ns
.preheader:25  %u1_1 = fadd float %tmp_4, -1.000000e+00

ST_29: u2_1 [4/5] 8.26ns
.preheader:27  %u2_1 = fadd float %tmp_5, -1.000000e+00


 <State 30>: 8.26ns
ST_30: u1_1 [3/5] 8.26ns
.preheader:25  %u1_1 = fadd float %tmp_4, -1.000000e+00

ST_30: u2_1 [3/5] 8.26ns
.preheader:27  %u2_1 = fadd float %tmp_5, -1.000000e+00


 <State 31>: 8.26ns
ST_31: u1_1 [2/5] 8.26ns
.preheader:25  %u1_1 = fadd float %tmp_4, -1.000000e+00

ST_31: u2_1 [2/5] 8.26ns
.preheader:27  %u2_1 = fadd float %tmp_5, -1.000000e+00


 <State 32>: 8.26ns
ST_32: u1_1 [1/5] 8.26ns
.preheader:25  %u1_1 = fadd float %tmp_4, -1.000000e+00

ST_32: u2_1 [1/5] 8.26ns
.preheader:27  %u2_1 = fadd float %tmp_5, -1.000000e+00


 <State 33>: 5.78ns
ST_33: tmp_6 [4/4] 5.78ns
.preheader:28  %tmp_6 = fmul float %u1_1, %u1_1

ST_33: tmp_7 [4/4] 5.78ns
.preheader:29  %tmp_7 = fmul float %u2_1, %u2_1


 <State 34>: 5.78ns
ST_34: tmp_6 [3/4] 5.78ns
.preheader:28  %tmp_6 = fmul float %u1_1, %u1_1

ST_34: tmp_7 [3/4] 5.78ns
.preheader:29  %tmp_7 = fmul float %u2_1, %u2_1


 <State 35>: 5.78ns
ST_35: tmp_6 [2/4] 5.78ns
.preheader:28  %tmp_6 = fmul float %u1_1, %u1_1

ST_35: tmp_7 [2/4] 5.78ns
.preheader:29  %tmp_7 = fmul float %u2_1, %u2_1


 <State 36>: 5.78ns
ST_36: tmp_6 [1/4] 5.78ns
.preheader:28  %tmp_6 = fmul float %u1_1, %u1_1

ST_36: tmp_7 [1/4] 5.78ns
.preheader:29  %tmp_7 = fmul float %u2_1, %u2_1


 <State 37>: 8.26ns
ST_37: w [5/5] 8.26ns
.preheader:30  %w = fadd float %tmp_6, %tmp_7


 <State 38>: 8.26ns
ST_38: w [4/5] 8.26ns
.preheader:30  %w = fadd float %tmp_6, %tmp_7


 <State 39>: 8.26ns
ST_39: w [3/5] 8.26ns
.preheader:30  %w = fadd float %tmp_6, %tmp_7


 <State 40>: 8.26ns
ST_40: w [2/5] 8.26ns
.preheader:30  %w = fadd float %tmp_6, %tmp_7


 <State 41>: 8.26ns
ST_41: w [1/5] 8.26ns
.preheader:30  %w = fadd float %tmp_6, %tmp_7


 <State 42>: 7.74ns
ST_42: tmp_8_i [1/1] 0.00ns
.preheader:20  %tmp_8_i = call i16 @_ssdm_op_BitConcatenate.i16.i1.i1.i14(i1 %tmp_5_i7, i1 %tmp_i_8, i14 %tmp_i)

ST_42: w_to_int [1/1] 0.00ns
.preheader:31  %w_to_int = bitcast float %w to i32

ST_42: tmp_8 [1/1] 0.00ns
.preheader:32  %tmp_8 = call i8 @_ssdm_op_PartSelect.i8.i32.i32.i32(i32 %w_to_int, i32 23, i32 30)

ST_42: tmp_37 [1/1] 0.00ns
.preheader:33  %tmp_37 = trunc i32 %w_to_int to i23

ST_42: notlhs [1/1] 2.47ns
.preheader:34  %notlhs = icmp ne i8 %tmp_8, -1

ST_42: notrhs [1/1] 2.84ns
.preheader:35  %notrhs = icmp eq i23 %tmp_37, 0

ST_42: tmp_21 [1/1] 0.00ns (grouped into LUT with out node tmp_23)
.preheader:36  %tmp_21 = or i1 %notrhs, %notlhs

ST_42: tmp_22 [1/1] 6.37ns
.preheader:37  %tmp_22 = fcmp oge float %w, 1.000000e+00

ST_42: tmp_23 [1/1] 1.37ns (out node of the LUT)
.preheader:38  %tmp_23 = and i1 %tmp_21, %tmp_22

ST_42: stg_292 [1/1] 0.00ns
.preheader:39  br i1 %tmp_23, label %.preheader, label %_ifconv1

ST_42: stg_293 [1/1] 0.00ns
_ifconv1:0  store i16 %tmp_8_i, i16* @cur, align 2

ST_42: tmp_9 [1/1] 5.12ns
_ifconv1:1  %tmp_9 = fpext float %w to double


 <State 43>: 7.48ns
ST_43: tmp_10 [31/31] 7.48ns
_ifconv1:2  %tmp_10 = call double @llvm.log.f64(double %tmp_9)


 <State 44>: 7.48ns
ST_44: tmp_10 [30/31] 7.48ns
_ifconv1:2  %tmp_10 = call double @llvm.log.f64(double %tmp_9)


 <State 45>: 7.48ns
ST_45: tmp_10 [29/31] 7.48ns
_ifconv1:2  %tmp_10 = call double @llvm.log.f64(double %tmp_9)


 <State 46>: 7.48ns
ST_46: tmp_10 [28/31] 7.48ns
_ifconv1:2  %tmp_10 = call double @llvm.log.f64(double %tmp_9)


 <State 47>: 7.48ns
ST_47: tmp_10 [27/31] 7.48ns
_ifconv1:2  %tmp_10 = call double @llvm.log.f64(double %tmp_9)


 <State 48>: 7.48ns
ST_48: tmp_10 [26/31] 7.48ns
_ifconv1:2  %tmp_10 = call double @llvm.log.f64(double %tmp_9)


 <State 49>: 7.48ns
ST_49: tmp_10 [25/31] 7.48ns
_ifconv1:2  %tmp_10 = call double @llvm.log.f64(double %tmp_9)


 <State 50>: 7.48ns
ST_50: tmp_10 [24/31] 7.48ns
_ifconv1:2  %tmp_10 = call double @llvm.log.f64(double %tmp_9)


 <State 51>: 7.48ns
ST_51: tmp_10 [23/31] 7.48ns
_ifconv1:2  %tmp_10 = call double @llvm.log.f64(double %tmp_9)


 <State 52>: 7.48ns
ST_52: tmp_10 [22/31] 7.48ns
_ifconv1:2  %tmp_10 = call double @llvm.log.f64(double %tmp_9)


 <State 53>: 7.48ns
ST_53: tmp_10 [21/31] 7.48ns
_ifconv1:2  %tmp_10 = call double @llvm.log.f64(double %tmp_9)


 <State 54>: 7.48ns
ST_54: tmp_10 [20/31] 7.48ns
_ifconv1:2  %tmp_10 = call double @llvm.log.f64(double %tmp_9)


 <State 55>: 7.48ns
ST_55: tmp_10 [19/31] 7.48ns
_ifconv1:2  %tmp_10 = call double @llvm.log.f64(double %tmp_9)


 <State 56>: 7.48ns
ST_56: tmp_10 [18/31] 7.48ns
_ifconv1:2  %tmp_10 = call double @llvm.log.f64(double %tmp_9)


 <State 57>: 7.48ns
ST_57: tmp_10 [17/31] 7.48ns
_ifconv1:2  %tmp_10 = call double @llvm.log.f64(double %tmp_9)


 <State 58>: 7.48ns
ST_58: tmp_10 [16/31] 7.48ns
_ifconv1:2  %tmp_10 = call double @llvm.log.f64(double %tmp_9)


 <State 59>: 7.48ns
ST_59: tmp_10 [15/31] 7.48ns
_ifconv1:2  %tmp_10 = call double @llvm.log.f64(double %tmp_9)


 <State 60>: 7.48ns
ST_60: tmp_10 [14/31] 7.48ns
_ifconv1:2  %tmp_10 = call double @llvm.log.f64(double %tmp_9)


 <State 61>: 7.48ns
ST_61: tmp_10 [13/31] 7.48ns
_ifconv1:2  %tmp_10 = call double @llvm.log.f64(double %tmp_9)


 <State 62>: 7.48ns
ST_62: tmp_10 [12/31] 7.48ns
_ifconv1:2  %tmp_10 = call double @llvm.log.f64(double %tmp_9)


 <State 63>: 7.48ns
ST_63: tmp_10 [11/31] 7.48ns
_ifconv1:2  %tmp_10 = call double @llvm.log.f64(double %tmp_9)


 <State 64>: 7.48ns
ST_64: tmp_10 [10/31] 7.48ns
_ifconv1:2  %tmp_10 = call double @llvm.log.f64(double %tmp_9)


 <State 65>: 7.48ns
ST_65: tmp_10 [9/31] 7.48ns
_ifconv1:2  %tmp_10 = call double @llvm.log.f64(double %tmp_9)


 <State 66>: 7.48ns
ST_66: tmp_10 [8/31] 7.48ns
_ifconv1:2  %tmp_10 = call double @llvm.log.f64(double %tmp_9)


 <State 67>: 7.48ns
ST_67: tmp_10 [7/31] 7.48ns
_ifconv1:2  %tmp_10 = call double @llvm.log.f64(double %tmp_9)


 <State 68>: 7.48ns
ST_68: tmp_10 [6/31] 7.48ns
_ifconv1:2  %tmp_10 = call double @llvm.log.f64(double %tmp_9)


 <State 69>: 7.48ns
ST_69: tmp_10 [5/31] 7.48ns
_ifconv1:2  %tmp_10 = call double @llvm.log.f64(double %tmp_9)


 <State 70>: 7.48ns
ST_70: tmp_10 [4/31] 7.48ns
_ifconv1:2  %tmp_10 = call double @llvm.log.f64(double %tmp_9)


 <State 71>: 7.48ns
ST_71: tmp_10 [3/31] 7.48ns
_ifconv1:2  %tmp_10 = call double @llvm.log.f64(double %tmp_9)


 <State 72>: 7.48ns
ST_72: tmp_10 [2/31] 7.48ns
_ifconv1:2  %tmp_10 = call double @llvm.log.f64(double %tmp_9)


 <State 73>: 7.48ns
ST_73: tmp_10 [1/31] 7.48ns
_ifconv1:2  %tmp_10 = call double @llvm.log.f64(double %tmp_9)


 <State 74>: 7.79ns
ST_74: tmp_11 [6/6] 7.79ns
_ifconv1:3  %tmp_11 = fmul double %tmp_10, -2.000000e+00


 <State 75>: 7.79ns
ST_75: tmp_11 [5/6] 7.79ns
_ifconv1:3  %tmp_11 = fmul double %tmp_10, -2.000000e+00


 <State 76>: 7.79ns
ST_76: tmp_11 [4/6] 7.79ns
_ifconv1:3  %tmp_11 = fmul double %tmp_10, -2.000000e+00


 <State 77>: 7.79ns
ST_77: tmp_11 [3/6] 7.79ns
_ifconv1:3  %tmp_11 = fmul double %tmp_10, -2.000000e+00


 <State 78>: 7.79ns
ST_78: tmp_11 [2/6] 7.79ns
_ifconv1:3  %tmp_11 = fmul double %tmp_10, -2.000000e+00


 <State 79>: 7.79ns
ST_79: tmp_11 [1/6] 7.79ns
_ifconv1:3  %tmp_11 = fmul double %tmp_10, -2.000000e+00


 <State 80>: 8.66ns
ST_80: tmp_12 [31/31] 8.66ns
_ifconv1:4  %tmp_12 = fdiv double %tmp_11, %tmp_9


 <State 81>: 8.66ns
ST_81: tmp_12 [30/31] 8.66ns
_ifconv1:4  %tmp_12 = fdiv double %tmp_11, %tmp_9


 <State 82>: 8.66ns
ST_82: tmp_12 [29/31] 8.66ns
_ifconv1:4  %tmp_12 = fdiv double %tmp_11, %tmp_9


 <State 83>: 8.66ns
ST_83: tmp_12 [28/31] 8.66ns
_ifconv1:4  %tmp_12 = fdiv double %tmp_11, %tmp_9


 <State 84>: 8.66ns
ST_84: tmp_12 [27/31] 8.66ns
_ifconv1:4  %tmp_12 = fdiv double %tmp_11, %tmp_9


 <State 85>: 8.66ns
ST_85: tmp_12 [26/31] 8.66ns
_ifconv1:4  %tmp_12 = fdiv double %tmp_11, %tmp_9


 <State 86>: 8.66ns
ST_86: tmp_12 [25/31] 8.66ns
_ifconv1:4  %tmp_12 = fdiv double %tmp_11, %tmp_9


 <State 87>: 8.66ns
ST_87: tmp_12 [24/31] 8.66ns
_ifconv1:4  %tmp_12 = fdiv double %tmp_11, %tmp_9


 <State 88>: 8.66ns
ST_88: tmp_12 [23/31] 8.66ns
_ifconv1:4  %tmp_12 = fdiv double %tmp_11, %tmp_9


 <State 89>: 8.66ns
ST_89: tmp_12 [22/31] 8.66ns
_ifconv1:4  %tmp_12 = fdiv double %tmp_11, %tmp_9


 <State 90>: 8.66ns
ST_90: tmp_12 [21/31] 8.66ns
_ifconv1:4  %tmp_12 = fdiv double %tmp_11, %tmp_9


 <State 91>: 8.66ns
ST_91: tmp_12 [20/31] 8.66ns
_ifconv1:4  %tmp_12 = fdiv double %tmp_11, %tmp_9


 <State 92>: 8.66ns
ST_92: tmp_12 [19/31] 8.66ns
_ifconv1:4  %tmp_12 = fdiv double %tmp_11, %tmp_9


 <State 93>: 8.66ns
ST_93: tmp_12 [18/31] 8.66ns
_ifconv1:4  %tmp_12 = fdiv double %tmp_11, %tmp_9


 <State 94>: 8.66ns
ST_94: tmp_12 [17/31] 8.66ns
_ifconv1:4  %tmp_12 = fdiv double %tmp_11, %tmp_9


 <State 95>: 8.66ns
ST_95: tmp_12 [16/31] 8.66ns
_ifconv1:4  %tmp_12 = fdiv double %tmp_11, %tmp_9


 <State 96>: 8.66ns
ST_96: tmp_12 [15/31] 8.66ns
_ifconv1:4  %tmp_12 = fdiv double %tmp_11, %tmp_9


 <State 97>: 8.66ns
ST_97: tmp_12 [14/31] 8.66ns
_ifconv1:4  %tmp_12 = fdiv double %tmp_11, %tmp_9


 <State 98>: 8.66ns
ST_98: tmp_12 [13/31] 8.66ns
_ifconv1:4  %tmp_12 = fdiv double %tmp_11, %tmp_9


 <State 99>: 8.66ns
ST_99: tmp_12 [12/31] 8.66ns
_ifconv1:4  %tmp_12 = fdiv double %tmp_11, %tmp_9


 <State 100>: 8.66ns
ST_100: tmp_12 [11/31] 8.66ns
_ifconv1:4  %tmp_12 = fdiv double %tmp_11, %tmp_9


 <State 101>: 8.66ns
ST_101: tmp_12 [10/31] 8.66ns
_ifconv1:4  %tmp_12 = fdiv double %tmp_11, %tmp_9


 <State 102>: 8.66ns
ST_102: tmp_12 [9/31] 8.66ns
_ifconv1:4  %tmp_12 = fdiv double %tmp_11, %tmp_9


 <State 103>: 8.66ns
ST_103: tmp_12 [8/31] 8.66ns
_ifconv1:4  %tmp_12 = fdiv double %tmp_11, %tmp_9


 <State 104>: 8.66ns
ST_104: tmp_12 [7/31] 8.66ns
_ifconv1:4  %tmp_12 = fdiv double %tmp_11, %tmp_9


 <State 105>: 8.66ns
ST_105: tmp_12 [6/31] 8.66ns
_ifconv1:4  %tmp_12 = fdiv double %tmp_11, %tmp_9


 <State 106>: 8.66ns
ST_106: tmp_12 [5/31] 8.66ns
_ifconv1:4  %tmp_12 = fdiv double %tmp_11, %tmp_9


 <State 107>: 8.66ns
ST_107: tmp_12 [4/31] 8.66ns
_ifconv1:4  %tmp_12 = fdiv double %tmp_11, %tmp_9


 <State 108>: 8.66ns
ST_108: tmp_12 [3/31] 8.66ns
_ifconv1:4  %tmp_12 = fdiv double %tmp_11, %tmp_9


 <State 109>: 8.66ns
ST_109: tmp_12 [2/31] 8.66ns
_ifconv1:4  %tmp_12 = fdiv double %tmp_11, %tmp_9


 <State 110>: 8.66ns
ST_110: tmp_12 [1/31] 8.66ns
_ifconv1:4  %tmp_12 = fdiv double %tmp_11, %tmp_9


 <State 111>: 8.49ns
ST_111: tmp_13 [30/30] 8.49ns
_ifconv1:5  %tmp_13 = call double @llvm.sqrt.f64(double %tmp_12)


 <State 112>: 8.49ns
ST_112: tmp_13 [29/30] 8.49ns
_ifconv1:5  %tmp_13 = call double @llvm.sqrt.f64(double %tmp_12)


 <State 113>: 8.49ns
ST_113: tmp_13 [28/30] 8.49ns
_ifconv1:5  %tmp_13 = call double @llvm.sqrt.f64(double %tmp_12)


 <State 114>: 8.49ns
ST_114: tmp_13 [27/30] 8.49ns
_ifconv1:5  %tmp_13 = call double @llvm.sqrt.f64(double %tmp_12)


 <State 115>: 8.49ns
ST_115: tmp_13 [26/30] 8.49ns
_ifconv1:5  %tmp_13 = call double @llvm.sqrt.f64(double %tmp_12)


 <State 116>: 8.49ns
ST_116: tmp_13 [25/30] 8.49ns
_ifconv1:5  %tmp_13 = call double @llvm.sqrt.f64(double %tmp_12)


 <State 117>: 8.49ns
ST_117: tmp_13 [24/30] 8.49ns
_ifconv1:5  %tmp_13 = call double @llvm.sqrt.f64(double %tmp_12)


 <State 118>: 8.49ns
ST_118: tmp_13 [23/30] 8.49ns
_ifconv1:5  %tmp_13 = call double @llvm.sqrt.f64(double %tmp_12)


 <State 119>: 8.49ns
ST_119: tmp_13 [22/30] 8.49ns
_ifconv1:5  %tmp_13 = call double @llvm.sqrt.f64(double %tmp_12)


 <State 120>: 8.49ns
ST_120: tmp_13 [21/30] 8.49ns
_ifconv1:5  %tmp_13 = call double @llvm.sqrt.f64(double %tmp_12)


 <State 121>: 8.49ns
ST_121: tmp_13 [20/30] 8.49ns
_ifconv1:5  %tmp_13 = call double @llvm.sqrt.f64(double %tmp_12)


 <State 122>: 8.49ns
ST_122: tmp_13 [19/30] 8.49ns
_ifconv1:5  %tmp_13 = call double @llvm.sqrt.f64(double %tmp_12)


 <State 123>: 8.49ns
ST_123: tmp_13 [18/30] 8.49ns
_ifconv1:5  %tmp_13 = call double @llvm.sqrt.f64(double %tmp_12)


 <State 124>: 8.49ns
ST_124: tmp_13 [17/30] 8.49ns
_ifconv1:5  %tmp_13 = call double @llvm.sqrt.f64(double %tmp_12)


 <State 125>: 8.49ns
ST_125: tmp_13 [16/30] 8.49ns
_ifconv1:5  %tmp_13 = call double @llvm.sqrt.f64(double %tmp_12)


 <State 126>: 8.49ns
ST_126: tmp_13 [15/30] 8.49ns
_ifconv1:5  %tmp_13 = call double @llvm.sqrt.f64(double %tmp_12)


 <State 127>: 8.49ns
ST_127: tmp_13 [14/30] 8.49ns
_ifconv1:5  %tmp_13 = call double @llvm.sqrt.f64(double %tmp_12)


 <State 128>: 8.49ns
ST_128: tmp_13 [13/30] 8.49ns
_ifconv1:5  %tmp_13 = call double @llvm.sqrt.f64(double %tmp_12)


 <State 129>: 8.49ns
ST_129: tmp_13 [12/30] 8.49ns
_ifconv1:5  %tmp_13 = call double @llvm.sqrt.f64(double %tmp_12)


 <State 130>: 8.49ns
ST_130: tmp_13 [11/30] 8.49ns
_ifconv1:5  %tmp_13 = call double @llvm.sqrt.f64(double %tmp_12)


 <State 131>: 8.49ns
ST_131: tmp_13 [10/30] 8.49ns
_ifconv1:5  %tmp_13 = call double @llvm.sqrt.f64(double %tmp_12)


 <State 132>: 8.49ns
ST_132: tmp_13 [9/30] 8.49ns
_ifconv1:5  %tmp_13 = call double @llvm.sqrt.f64(double %tmp_12)


 <State 133>: 8.49ns
ST_133: tmp_13 [8/30] 8.49ns
_ifconv1:5  %tmp_13 = call double @llvm.sqrt.f64(double %tmp_12)


 <State 134>: 8.49ns
ST_134: tmp_13 [7/30] 8.49ns
_ifconv1:5  %tmp_13 = call double @llvm.sqrt.f64(double %tmp_12)


 <State 135>: 8.49ns
ST_135: tmp_13 [6/30] 8.49ns
_ifconv1:5  %tmp_13 = call double @llvm.sqrt.f64(double %tmp_12)


 <State 136>: 8.49ns
ST_136: tmp_13 [5/30] 8.49ns
_ifconv1:5  %tmp_13 = call double @llvm.sqrt.f64(double %tmp_12)


 <State 137>: 8.49ns
ST_137: tmp_13 [4/30] 8.49ns
_ifconv1:5  %tmp_13 = call double @llvm.sqrt.f64(double %tmp_12)


 <State 138>: 8.49ns
ST_138: tmp_13 [3/30] 8.49ns
_ifconv1:5  %tmp_13 = call double @llvm.sqrt.f64(double %tmp_12)


 <State 139>: 8.49ns
ST_139: tmp_13 [2/30] 8.49ns
_ifconv1:5  %tmp_13 = call double @llvm.sqrt.f64(double %tmp_12)


 <State 140>: 8.49ns
ST_140: tmp_13 [1/30] 8.49ns
_ifconv1:5  %tmp_13 = call double @llvm.sqrt.f64(double %tmp_12)

ST_140: stdd_read [1/1] 1.00ns
_ifconv1:8  %stdd_read = call i32 @_ssdm_op_Read.s_axilite.i32P(i32* %stdd) nounwind

ST_140: tmp_15 [6/6] 6.18ns
_ifconv1:9  %tmp_15 = uitofp i32 %stdd_read to float


 <State 141>: 6.46ns
ST_141: w_1 [1/1] 6.46ns
_ifconv1:6  %w_1 = fptrunc double %tmp_13 to float

ST_141: tmp_15 [5/6] 6.18ns
_ifconv1:9  %tmp_15 = uitofp i32 %stdd_read to float


 <State 142>: 6.18ns
ST_142: tmp_14 [4/4] 5.78ns
_ifconv1:7  %tmp_14 = fmul float %u1_1, %w_1

ST_142: tmp_15 [4/6] 6.18ns
_ifconv1:9  %tmp_15 = uitofp i32 %stdd_read to float

ST_142: tmp_17 [4/4] 5.78ns
_ifconv1:11  %tmp_17 = fmul float %u2_1, %w_1


 <State 143>: 6.18ns
ST_143: tmp_14 [3/4] 5.78ns
_ifconv1:7  %tmp_14 = fmul float %u1_1, %w_1

ST_143: tmp_15 [3/6] 6.18ns
_ifconv1:9  %tmp_15 = uitofp i32 %stdd_read to float

ST_143: tmp_17 [3/4] 5.78ns
_ifconv1:11  %tmp_17 = fmul float %u2_1, %w_1


 <State 144>: 6.18ns
ST_144: tmp_14 [2/4] 5.78ns
_ifconv1:7  %tmp_14 = fmul float %u1_1, %w_1

ST_144: tmp_15 [2/6] 6.18ns
_ifconv1:9  %tmp_15 = uitofp i32 %stdd_read to float

ST_144: tmp_17 [2/4] 5.78ns
_ifconv1:11  %tmp_17 = fmul float %u2_1, %w_1

ST_144: tmp_38 [1/1] 0.00ns
_ifconv1:14  %tmp_38 = sext i16 %input_axis_read to i32

ST_144: tmp_19 [6/6] 6.18ns
_ifconv1:15  %tmp_19 = sitofp i32 %tmp_38 to float


 <State 145>: 6.18ns
ST_145: tmp_14 [1/4] 5.78ns
_ifconv1:7  %tmp_14 = fmul float %u1_1, %w_1

ST_145: tmp_15 [1/6] 6.18ns
_ifconv1:9  %tmp_15 = uitofp i32 %stdd_read to float

ST_145: tmp_17 [1/4] 5.78ns
_ifconv1:11  %tmp_17 = fmul float %u2_1, %w_1

ST_145: tmp_19 [5/6] 6.18ns
_ifconv1:15  %tmp_19 = sitofp i32 %tmp_38 to float


 <State 146>: 6.18ns
ST_146: tmp_16 [4/4] 5.78ns
_ifconv1:10  %tmp_16 = fmul float %tmp_14, %tmp_15

ST_146: tmp_18 [4/4] 5.78ns
_ifconv1:12  %tmp_18 = fmul float %tmp_17, %tmp_15

ST_146: tmp_19 [4/6] 6.18ns
_ifconv1:15  %tmp_19 = sitofp i32 %tmp_38 to float


 <State 147>: 6.18ns
ST_147: tmp_16 [3/4] 5.78ns
_ifconv1:10  %tmp_16 = fmul float %tmp_14, %tmp_15

ST_147: tmp_18 [3/4] 5.78ns
_ifconv1:12  %tmp_18 = fmul float %tmp_17, %tmp_15

ST_147: tmp_19 [3/6] 6.18ns
_ifconv1:15  %tmp_19 = sitofp i32 %tmp_38 to float


 <State 148>: 6.18ns
ST_148: tmp_16 [2/4] 5.78ns
_ifconv1:10  %tmp_16 = fmul float %tmp_14, %tmp_15

ST_148: tmp_18 [2/4] 5.78ns
_ifconv1:12  %tmp_18 = fmul float %tmp_17, %tmp_15

ST_148: tmp_19 [2/6] 6.18ns
_ifconv1:15  %tmp_19 = sitofp i32 %tmp_38 to float


 <State 149>: 6.18ns
ST_149: tmp_16 [1/4] 5.78ns
_ifconv1:10  %tmp_16 = fmul float %tmp_14, %tmp_15

ST_149: tmp_18 [1/4] 5.78ns
_ifconv1:12  %tmp_18 = fmul float %tmp_17, %tmp_15

ST_149: stg_423 [1/1] 0.00ns
_ifconv1:13  store float %tmp_18, float* @store_g, align 4

ST_149: tmp_19 [1/6] 6.18ns
_ifconv1:15  %tmp_19 = sitofp i32 %tmp_38 to float


 <State 150>: 8.26ns
ST_150: x_assign [5/5] 8.26ns
_ifconv1:16  %x_assign = fadd float %tmp_19, %tmp_16


 <State 151>: 8.26ns
ST_151: x_assign [4/5] 8.26ns
_ifconv1:16  %x_assign = fadd float %tmp_19, %tmp_16


 <State 152>: 8.26ns
ST_152: x_assign [3/5] 8.26ns
_ifconv1:16  %x_assign = fadd float %tmp_19, %tmp_16


 <State 153>: 8.26ns
ST_153: x_assign [2/5] 8.26ns
_ifconv1:16  %x_assign = fadd float %tmp_19, %tmp_16


 <State 154>: 8.26ns
ST_154: x_assign [1/5] 8.26ns
_ifconv1:16  %x_assign = fadd float %tmp_19, %tmp_16


 <State 155>: 6.30ns
ST_155: p_Val2_6 [1/1] 0.00ns
_ifconv1:17  %p_Val2_6 = bitcast float %x_assign to i32

ST_155: p_Result_s [1/1] 0.00ns
_ifconv1:18  %p_Result_s = call i1 @_ssdm_op_BitSelect.i1.i32.i32(i32 %p_Val2_6, i32 31)

ST_155: loc_V [1/1] 0.00ns
_ifconv1:19  %loc_V = call i8 @_ssdm_op_PartSelect.i8.i32.i32.i32(i32 %p_Val2_6, i32 23, i32 30) nounwind

ST_155: loc_V_3 [1/1] 0.00ns
_ifconv1:20  %loc_V_3 = trunc i32 %p_Val2_6 to i23

ST_155: p_Result_1 [1/1] 0.00ns
_ifconv1:21  %p_Result_1 = call i24 @_ssdm_op_BitConcatenate.i24.i1.i23(i1 true, i23 %loc_V_3) nounwind

ST_155: tmp_i_i [1/1] 0.00ns (grouped into LUT with out node p_Val2_9)
_ifconv1:22  %tmp_i_i = zext i24 %p_Result_1 to i62

ST_155: tmp_i_i_i_cast6 [1/1] 0.00ns
_ifconv1:23  %tmp_i_i_i_cast6 = zext i8 %loc_V to i9

ST_155: sh_assign_2 [1/1] 1.67ns
_ifconv1:24  %sh_assign_2 = add i9 -127, %tmp_i_i_i_cast6

ST_155: isNeg_1 [1/1] 0.00ns
_ifconv1:25  %isNeg_1 = call i1 @_ssdm_op_BitSelect.i1.i9.i32(i9 %sh_assign_2, i32 8)

ST_155: tmp_1_i_i [1/1] 1.67ns
_ifconv1:26  %tmp_1_i_i = sub i8 127, %loc_V

ST_155: tmp_1_i_i_cast [1/1] 0.00ns
_ifconv1:27  %tmp_1_i_i_cast = sext i8 %tmp_1_i_i to i9

ST_155: sh_assign_3 [1/1] 1.37ns
_ifconv1:28  %sh_assign_3 = select i1 %isNeg_1, i9 %tmp_1_i_i_cast, i9 %sh_assign_2

ST_155: sh_assign_3_cast [1/1] 0.00ns (grouped into LUT with out node p_Val2_9)
_ifconv1:29  %sh_assign_3_cast = sext i9 %sh_assign_3 to i32

ST_155: sh_assign_3_cast_cast [1/1] 0.00ns (grouped into LUT with out node p_Val2_9)
_ifconv1:30  %sh_assign_3_cast_cast = sext i9 %sh_assign_3 to i24

ST_155: tmp_2_i_i [1/1] 0.00ns (grouped into LUT with out node p_Val2_9)
_ifconv1:31  %tmp_2_i_i = zext i32 %sh_assign_3_cast to i62

ST_155: tmp_3_i_i [1/1] 0.00ns (grouped into LUT with out node p_Val2_9)
_ifconv1:32  %tmp_3_i_i = lshr i24 %p_Result_1, %sh_assign_3_cast_cast

ST_155: tmp_5_i_i [1/1] 0.00ns (grouped into LUT with out node p_Val2_9)
_ifconv1:33  %tmp_5_i_i = shl i62 %tmp_i_i, %tmp_2_i_i

ST_155: tmp_42 [1/1] 0.00ns (grouped into LUT with out node p_Val2_9)
_ifconv1:34  %tmp_42 = call i1 @_ssdm_op_BitSelect.i1.i24.i32(i24 %tmp_3_i_i, i32 23)

ST_155: tmp_31 [1/1] 0.00ns (grouped into LUT with out node p_Val2_9)
_ifconv1:35  %tmp_31 = zext i1 %tmp_42 to i16

ST_155: tmp_32 [1/1] 0.00ns (grouped into LUT with out node p_Val2_9)
_ifconv1:36  %tmp_32 = call i16 @_ssdm_op_PartSelect.i16.i62.i32.i32(i62 %tmp_5_i_i, i32 23, i32 38)

ST_155: p_Val2_9 [1/1] 3.26ns (out node of the LUT)
_ifconv1:37  %p_Val2_9 = select i1 %isNeg_1, i16 %tmp_31, i16 %tmp_32


 <State 156>: 4.85ns
ST_156: p_Val2_7_i_i [1/1] 1.91ns
_ifconv1:38  %p_Val2_7_i_i = sub i16 0, %p_Val2_9

ST_156: p_Val2_11 [1/1] 1.37ns
_ifconv1:39  %p_Val2_11 = select i1 %p_Result_s, i16 %p_Val2_7_i_i, i16 %p_Val2_9

ST_156: stg_453 [1/1] 1.57ns
_ifconv1:40  br label %2

ST_156: storemerge1 [1/1] 0.00ns
:0  %storemerge1 = phi i16 [ %p_Val2_11, %_ifconv1 ], [ %p_Val2_5, %_ifconv ]

ST_156: storemerge [1/1] 0.00ns
:1  %storemerge = phi i1 [ false, %_ifconv1 ], [ true, %_ifconv ]

ST_156: stg_456 [1/1] 0.00ns
:2  call void @_ssdm_op_Write.axis.i16P(i16* %output_axis, i16 %storemerge1) nounwind

ST_156: stg_457 [1/1] 0.00ns
:3  store i1 %storemerge, i1* @store_val, align 1

ST_156: stg_458 [1/1] 0.00ns
:4  br label %4

ST_156: stg_459 [1/1] 0.00ns
:0  ret void



============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 No timing violations. 


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18
	State 19
	State 20
	State 21
	State 22
	State 23
	State 24
	State 25
	State 26
	State 27
	State 28
	State 29
	State 30
	State 31
	State 32
	State 33
	State 34
	State 35
	State 36
	State 37
	State 38
	State 39
	State 40
	State 41
	State 42
	State 43
	State 44
	State 45
	State 46
	State 47
	State 48
	State 49
	State 50
	State 51
	State 52
	State 53
	State 54
	State 55
	State 56
	State 57
	State 58
	State 59
	State 60
	State 61
	State 62
	State 63
	State 64
	State 65
	State 66
	State 67
	State 68
	State 69
	State 70
	State 71
	State 72
	State 73
	State 74
	State 75
	State 76
	State 77
	State 78
	State 79
	State 80
	State 81
	State 82
	State 83
	State 84
	State 85
	State 86
	State 87
	State 88
	State 89
	State 90
	State 91
	State 92
	State 93
	State 94
	State 95
	State 96
	State 97
	State 98
	State 99
	State 100
	State 101
	State 102
	State 103
	State 104
	State 105
	State 106
	State 107
	State 108
	State 109
	State 110
	State 111
	State 112
	State 113
	State 114
	State 115
	State 116
	State 117
	State 118
	State 119
	State 120
	State 121
	State 122
	State 123
	State 124
	State 125
	State 126
	State 127
	State 128
	State 129
	State 130
	State 131
	State 132
	State 133
	State 134
	State 135
	State 136
	State 137
	State 138
	State 139
	State 140
	State 141
	State 142
	State 143
	State 144
	State 145
	State 146
	State 147
	State 148
	State 149
	State 150
	State 151
	State 152
	State 153
	State 154
	State 155
	State 156


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
