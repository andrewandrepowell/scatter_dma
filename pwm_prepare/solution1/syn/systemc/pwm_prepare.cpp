// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "pwm_prepare.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic pwm_prepare::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic pwm_prepare::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> pwm_prepare::ap_ST_st1_fsm_0 = "1";
const sc_lv<32> pwm_prepare::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> pwm_prepare::ap_const_lv1_1 = "1";
const int pwm_prepare::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<16> pwm_prepare::ap_const_lv16_0 = "0000000000000000";

pwm_prepare::pwm_prepare(sc_module_name name) : sc_module(name), mVcdFile(0) {
    pwm_prepare_control_axil_s_axi_U = new pwm_prepare_control_axil_s_axi<C_S_AXI_CONTROL_AXIL_ADDR_WIDTH,C_S_AXI_CONTROL_AXIL_DATA_WIDTH>("pwm_prepare_control_axil_s_axi_U");
    pwm_prepare_control_axil_s_axi_U->AWVALID(s_axi_control_axil_AWVALID);
    pwm_prepare_control_axil_s_axi_U->AWREADY(s_axi_control_axil_AWREADY);
    pwm_prepare_control_axil_s_axi_U->AWADDR(s_axi_control_axil_AWADDR);
    pwm_prepare_control_axil_s_axi_U->WVALID(s_axi_control_axil_WVALID);
    pwm_prepare_control_axil_s_axi_U->WREADY(s_axi_control_axil_WREADY);
    pwm_prepare_control_axil_s_axi_U->WDATA(s_axi_control_axil_WDATA);
    pwm_prepare_control_axil_s_axi_U->WSTRB(s_axi_control_axil_WSTRB);
    pwm_prepare_control_axil_s_axi_U->ARVALID(s_axi_control_axil_ARVALID);
    pwm_prepare_control_axil_s_axi_U->ARREADY(s_axi_control_axil_ARREADY);
    pwm_prepare_control_axil_s_axi_U->ARADDR(s_axi_control_axil_ARADDR);
    pwm_prepare_control_axil_s_axi_U->RVALID(s_axi_control_axil_RVALID);
    pwm_prepare_control_axil_s_axi_U->RREADY(s_axi_control_axil_RREADY);
    pwm_prepare_control_axil_s_axi_U->RDATA(s_axi_control_axil_RDATA);
    pwm_prepare_control_axil_s_axi_U->RRESP(s_axi_control_axil_RRESP);
    pwm_prepare_control_axil_s_axi_U->BVALID(s_axi_control_axil_BVALID);
    pwm_prepare_control_axil_s_axi_U->BREADY(s_axi_control_axil_BREADY);
    pwm_prepare_control_axil_s_axi_U->BRESP(s_axi_control_axil_BRESP);
    pwm_prepare_control_axil_s_axi_U->ACLK(ap_clk);
    pwm_prepare_control_axil_s_axi_U->ARESET(ap_rst_n_inv);
    pwm_prepare_control_axil_s_axi_U->ACLK_EN(ap_var_for_const0);
    pwm_prepare_control_axil_s_axi_U->ap_start(ap_start);
    pwm_prepare_control_axil_s_axi_U->interrupt(interrupt);
    pwm_prepare_control_axil_s_axi_U->ap_ready(ap_ready);
    pwm_prepare_control_axil_s_axi_U->ap_done(ap_done);
    pwm_prepare_control_axil_s_axi_U->ap_idle(ap_idle);
    pwm_prepare_control_axil_s_axi_U->shift_val(shift_val);
    pwm_prepare_control_axil_s_axi_U->sum_val(sum_val);
    pwm_prepare_control_axil_s_axi_U->enable_flag(enable_flag);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( ap_sig_76 );
    sensitive << ( ap_sig_ioackin_output_axis_TREADY );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( ap_sig_76 );
    sensitive << ( ap_sig_ioackin_output_axis_TREADY );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sig_123);
    sensitive << ( output_axis_TREADY );
    sensitive << ( ap_sig_76 );

    SC_METHOD(thread_ap_sig_18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_76);
    sensitive << ( ap_start );
    sensitive << ( input_axis_TVALID );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_18 );

    SC_METHOD(thread_ap_sig_ioackin_output_axis_TREADY);
    sensitive << ( output_axis_TREADY );
    sensitive << ( ap_reg_ioackin_output_axis_TREADY );

    SC_METHOD(thread_input_axis_TDATA_blk_n);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( input_axis_TVALID );

    SC_METHOD(thread_input_axis_TREADY);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( ap_sig_76 );
    sensitive << ( ap_sig_ioackin_output_axis_TREADY );

    SC_METHOD(thread_output_axis_TDATA);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( ap_sig_76 );
    sensitive << ( storemerge_fu_93_p0 );
    sensitive << ( tmp_3_fu_89_p1 );

    SC_METHOD(thread_output_axis_TDATA_blk_n);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( output_axis_TREADY );

    SC_METHOD(thread_output_axis_TVALID);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( ap_sig_76 );
    sensitive << ( ap_reg_ioackin_output_axis_TREADY );

    SC_METHOD(thread_storemerge_fu_93_p0);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );
    sensitive << ( enable_flag );

    SC_METHOD(thread_tmp_1_fu_77_p2);
    sensitive << ( shift_val );
    sensitive << ( tmp_fu_73_p1 );

    SC_METHOD(thread_tmp_2_fu_83_p2);
    sensitive << ( sum_val );
    sensitive << ( tmp_1_fu_77_p2 );

    SC_METHOD(thread_tmp_3_fu_89_p1);
    sensitive << ( tmp_2_fu_83_p2 );

    SC_METHOD(thread_tmp_fu_73_p1);
    sensitive << ( input_axis_TDATA );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_sig_76 );
    sensitive << ( ap_sig_ioackin_output_axis_TREADY );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "1";
    ap_reg_ioackin_output_axis_TREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "pwm_prepare_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, input_axis_TDATA, "(port)input_axis_TDATA");
    sc_trace(mVcdFile, input_axis_TVALID, "(port)input_axis_TVALID");
    sc_trace(mVcdFile, input_axis_TREADY, "(port)input_axis_TREADY");
    sc_trace(mVcdFile, output_axis_TDATA, "(port)output_axis_TDATA");
    sc_trace(mVcdFile, output_axis_TVALID, "(port)output_axis_TVALID");
    sc_trace(mVcdFile, output_axis_TREADY, "(port)output_axis_TREADY");
    sc_trace(mVcdFile, s_axi_control_axil_AWVALID, "(port)s_axi_control_axil_AWVALID");
    sc_trace(mVcdFile, s_axi_control_axil_AWREADY, "(port)s_axi_control_axil_AWREADY");
    sc_trace(mVcdFile, s_axi_control_axil_AWADDR, "(port)s_axi_control_axil_AWADDR");
    sc_trace(mVcdFile, s_axi_control_axil_WVALID, "(port)s_axi_control_axil_WVALID");
    sc_trace(mVcdFile, s_axi_control_axil_WREADY, "(port)s_axi_control_axil_WREADY");
    sc_trace(mVcdFile, s_axi_control_axil_WDATA, "(port)s_axi_control_axil_WDATA");
    sc_trace(mVcdFile, s_axi_control_axil_WSTRB, "(port)s_axi_control_axil_WSTRB");
    sc_trace(mVcdFile, s_axi_control_axil_ARVALID, "(port)s_axi_control_axil_ARVALID");
    sc_trace(mVcdFile, s_axi_control_axil_ARREADY, "(port)s_axi_control_axil_ARREADY");
    sc_trace(mVcdFile, s_axi_control_axil_ARADDR, "(port)s_axi_control_axil_ARADDR");
    sc_trace(mVcdFile, s_axi_control_axil_RVALID, "(port)s_axi_control_axil_RVALID");
    sc_trace(mVcdFile, s_axi_control_axil_RREADY, "(port)s_axi_control_axil_RREADY");
    sc_trace(mVcdFile, s_axi_control_axil_RDATA, "(port)s_axi_control_axil_RDATA");
    sc_trace(mVcdFile, s_axi_control_axil_RRESP, "(port)s_axi_control_axil_RRESP");
    sc_trace(mVcdFile, s_axi_control_axil_BVALID, "(port)s_axi_control_axil_BVALID");
    sc_trace(mVcdFile, s_axi_control_axil_BREADY, "(port)s_axi_control_axil_BREADY");
    sc_trace(mVcdFile, s_axi_control_axil_BRESP, "(port)s_axi_control_axil_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_18, "ap_sig_18");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, shift_val, "shift_val");
    sc_trace(mVcdFile, sum_val, "sum_val");
    sc_trace(mVcdFile, enable_flag, "enable_flag");
    sc_trace(mVcdFile, input_axis_TDATA_blk_n, "input_axis_TDATA_blk_n");
    sc_trace(mVcdFile, output_axis_TDATA_blk_n, "output_axis_TDATA_blk_n");
    sc_trace(mVcdFile, ap_sig_76, "ap_sig_76");
    sc_trace(mVcdFile, ap_sig_ioackin_output_axis_TREADY, "ap_sig_ioackin_output_axis_TREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_output_axis_TREADY, "ap_reg_ioackin_output_axis_TREADY");
    sc_trace(mVcdFile, tmp_fu_73_p1, "tmp_fu_73_p1");
    sc_trace(mVcdFile, tmp_1_fu_77_p2, "tmp_1_fu_77_p2");
    sc_trace(mVcdFile, tmp_2_fu_83_p2, "tmp_2_fu_83_p2");
    sc_trace(mVcdFile, storemerge_fu_93_p0, "storemerge_fu_93_p0");
    sc_trace(mVcdFile, tmp_3_fu_89_p1, "tmp_3_fu_89_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_sig_123, "ap_sig_123");
#endif

    }
    mHdltvinHandle.open("pwm_prepare.hdltvin.dat");
    mHdltvoutHandle.open("pwm_prepare.hdltvout.dat");
}

pwm_prepare::~pwm_prepare() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete pwm_prepare_control_axil_s_axi_U;
}

void pwm_prepare::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void pwm_prepare::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_output_axis_TREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read())) {
            if (!(ap_sig_76.read() || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_output_axis_TREADY.read()))) {
                ap_reg_ioackin_output_axis_TREADY = ap_const_logic_0;
            } else if (ap_sig_123.read()) {
                ap_reg_ioackin_output_axis_TREADY = ap_const_logic_1;
            }
        }
    }
}

void pwm_prepare::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
         !(ap_sig_76.read() || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_output_axis_TREADY.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void pwm_prepare::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void pwm_prepare::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
         !(ap_sig_76.read() || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_output_axis_TREADY.read())))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void pwm_prepare::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void pwm_prepare::thread_ap_sig_123() {
    ap_sig_123 = (!ap_sig_76.read() && esl_seteq<1,1,1>(ap_const_logic_1, output_axis_TREADY.read()));
}

void pwm_prepare::thread_ap_sig_18() {
    ap_sig_18 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void pwm_prepare::thread_ap_sig_76() {
    ap_sig_76 = (esl_seteq<1,1,1>(input_axis_TVALID.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0));
}

void pwm_prepare::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_18.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void pwm_prepare::thread_ap_sig_ioackin_output_axis_TREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_output_axis_TREADY.read())) {
        ap_sig_ioackin_output_axis_TREADY = output_axis_TREADY.read();
    } else {
        ap_sig_ioackin_output_axis_TREADY = ap_const_logic_1;
    }
}

void pwm_prepare::thread_input_axis_TDATA_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read())) {
        input_axis_TDATA_blk_n = input_axis_TVALID.read();
    } else {
        input_axis_TDATA_blk_n = ap_const_logic_1;
    }
}

void pwm_prepare::thread_input_axis_TREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
         !(ap_sig_76.read() || esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_output_axis_TREADY.read())))) {
        input_axis_TREADY = ap_const_logic_1;
    } else {
        input_axis_TREADY = ap_const_logic_0;
    }
}

void pwm_prepare::thread_output_axis_TDATA() {
    output_axis_TDATA = (!storemerge_fu_93_p0.read()[0].is_01())? sc_lv<16>(): ((storemerge_fu_93_p0.read()[0].to_bool())? tmp_3_fu_89_p1.read(): ap_const_lv16_0);
}

void pwm_prepare::thread_output_axis_TDATA_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read())) {
        output_axis_TDATA_blk_n = output_axis_TREADY.read();
    } else {
        output_axis_TDATA_blk_n = ap_const_logic_1;
    }
}

void pwm_prepare::thread_output_axis_TVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
         !ap_sig_76.read() && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_output_axis_TREADY.read()))) {
        output_axis_TVALID = ap_const_logic_1;
    } else {
        output_axis_TVALID = ap_const_logic_0;
    }
}

void pwm_prepare::thread_storemerge_fu_93_p0() {
    storemerge_fu_93_p0 =  (sc_lv<1>) (enable_flag.read());
}

void pwm_prepare::thread_tmp_1_fu_77_p2() {
    tmp_1_fu_77_p2 = (!tmp_fu_73_p1.read().is_01() || !shift_val.read().is_01())? sc_lv<32>(): sc_bigint<32>(tmp_fu_73_p1.read()) >> (unsigned short)shift_val.read().to_uint();
}

void pwm_prepare::thread_tmp_2_fu_83_p2() {
    tmp_2_fu_83_p2 = (!sum_val.read().is_01() || !tmp_1_fu_77_p2.read().is_01())? sc_lv<32>(): (sc_biguint<32>(sum_val.read()) + sc_biguint<32>(tmp_1_fu_77_p2.read()));
}

void pwm_prepare::thread_tmp_3_fu_89_p1() {
    tmp_3_fu_89_p1 = tmp_2_fu_83_p2.read().range(16-1, 0);
}

void pwm_prepare::thread_tmp_fu_73_p1() {
    tmp_fu_73_p1 = esl_sext<32,16>(input_axis_TDATA.read());
}

void pwm_prepare::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_st1_fsm_0;
break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

void pwm_prepare::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_axis_TDATA\" :  \"" << input_axis_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_axis_TVALID\" :  \"" << input_axis_TVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"input_axis_TREADY\" :  \"" << input_axis_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_axis_TDATA\" :  \"" << output_axis_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_axis_TVALID\" :  \"" << output_axis_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"output_axis_TREADY\" :  \"" << output_axis_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_axil_AWVALID\" :  \"" << s_axi_control_axil_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_axil_AWREADY\" :  \"" << s_axi_control_axil_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_axil_AWADDR\" :  \"" << s_axi_control_axil_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_axil_WVALID\" :  \"" << s_axi_control_axil_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_axil_WREADY\" :  \"" << s_axi_control_axil_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_axil_WDATA\" :  \"" << s_axi_control_axil_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_axil_WSTRB\" :  \"" << s_axi_control_axil_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_axil_ARVALID\" :  \"" << s_axi_control_axil_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_axil_ARREADY\" :  \"" << s_axi_control_axil_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_axil_ARADDR\" :  \"" << s_axi_control_axil_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_axil_RVALID\" :  \"" << s_axi_control_axil_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_axil_RREADY\" :  \"" << s_axi_control_axil_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_axil_RDATA\" :  \"" << s_axi_control_axil_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_axil_RRESP\" :  \"" << s_axi_control_axil_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_axil_BVALID\" :  \"" << s_axi_control_axil_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_axil_BREADY\" :  \"" << s_axi_control_axil_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_axil_BRESP\" :  \"" << s_axi_control_axil_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

