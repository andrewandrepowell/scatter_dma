-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pwm_prepare is
generic (
    C_S_AXI_CONTROL_AXIL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_AXIL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    input_axis_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    input_axis_TVALID : IN STD_LOGIC;
    input_axis_TREADY : OUT STD_LOGIC;
    output_axis_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_axis_TVALID : OUT STD_LOGIC;
    output_axis_TREADY : IN STD_LOGIC;
    s_axi_control_axil_AWVALID : IN STD_LOGIC;
    s_axi_control_axil_AWREADY : OUT STD_LOGIC;
    s_axi_control_axil_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_AXIL_ADDR_WIDTH-1 downto 0);
    s_axi_control_axil_WVALID : IN STD_LOGIC;
    s_axi_control_axil_WREADY : OUT STD_LOGIC;
    s_axi_control_axil_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_AXIL_DATA_WIDTH-1 downto 0);
    s_axi_control_axil_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_AXIL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_axil_ARVALID : IN STD_LOGIC;
    s_axi_control_axil_ARREADY : OUT STD_LOGIC;
    s_axi_control_axil_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_AXIL_ADDR_WIDTH-1 downto 0);
    s_axi_control_axil_RVALID : OUT STD_LOGIC;
    s_axi_control_axil_RREADY : IN STD_LOGIC;
    s_axi_control_axil_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_AXIL_DATA_WIDTH-1 downto 0);
    s_axi_control_axil_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_axil_BVALID : OUT STD_LOGIC;
    s_axi_control_axil_BREADY : IN STD_LOGIC;
    s_axi_control_axil_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of pwm_prepare is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "pwm_prepare,hls_ip_2016_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100tcsg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.607500,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=121,HLS_SYN_LUT=318}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_18 : BOOLEAN;
    signal ap_ready : STD_LOGIC;
    signal shift_val : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_val : STD_LOGIC_VECTOR (31 downto 0);
    signal enable_flag : STD_LOGIC;
    signal input_axis_TDATA_blk_n : STD_LOGIC;
    signal output_axis_TDATA_blk_n : STD_LOGIC;
    signal ap_sig_76 : BOOLEAN;
    signal ap_sig_ioackin_output_axis_TREADY : STD_LOGIC;
    signal ap_reg_ioackin_output_axis_TREADY : STD_LOGIC := '0';
    signal tmp_fu_73_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_77_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_83_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal storemerge_fu_93_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_89_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_123 : BOOLEAN;

    component pwm_prepare_control_axil_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        shift_val : OUT STD_LOGIC_VECTOR (31 downto 0);
        sum_val : OUT STD_LOGIC_VECTOR (31 downto 0);
        enable_flag : OUT STD_LOGIC );
    end component;



begin
    pwm_prepare_control_axil_s_axi_U : component pwm_prepare_control_axil_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_AXIL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_AXIL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_axil_AWVALID,
        AWREADY => s_axi_control_axil_AWREADY,
        AWADDR => s_axi_control_axil_AWADDR,
        WVALID => s_axi_control_axil_WVALID,
        WREADY => s_axi_control_axil_WREADY,
        WDATA => s_axi_control_axil_WDATA,
        WSTRB => s_axi_control_axil_WSTRB,
        ARVALID => s_axi_control_axil_ARVALID,
        ARREADY => s_axi_control_axil_ARREADY,
        ARADDR => s_axi_control_axil_ARADDR,
        RVALID => s_axi_control_axil_RVALID,
        RREADY => s_axi_control_axil_RREADY,
        RDATA => s_axi_control_axil_RDATA,
        RRESP => s_axi_control_axil_RRESP,
        BVALID => s_axi_control_axil_BVALID,
        BREADY => s_axi_control_axil_BREADY,
        BRESP => s_axi_control_axil_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        shift_val => shift_val,
        sum_val => sum_val,
        enable_flag => enable_flag);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ioackin_output_axis_TREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_output_axis_TREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then
                    if (not((ap_sig_76 or (ap_const_logic_0 = ap_sig_ioackin_output_axis_TREADY)))) then 
                        ap_reg_ioackin_output_axis_TREADY <= ap_const_logic_0;
                    elsif (ap_sig_123) then 
                        ap_reg_ioackin_output_axis_TREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_sig_76, ap_sig_ioackin_output_axis_TREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    ap_done_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_76, ap_sig_ioackin_output_axis_TREADY)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_sig_76 or (ap_const_logic_0 = ap_sig_ioackin_output_axis_TREADY))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_76, ap_sig_ioackin_output_axis_TREADY)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_sig_76 or (ap_const_logic_0 = ap_sig_ioackin_output_axis_TREADY))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_123_assign_proc : process(output_axis_TREADY, ap_sig_76)
    begin
                ap_sig_123 <= (not(ap_sig_76) and (ap_const_logic_1 = output_axis_TREADY));
    end process;


    ap_sig_18_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_18 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_76_assign_proc : process(ap_start, input_axis_TVALID)
    begin
                ap_sig_76 <= ((input_axis_TVALID = ap_const_logic_0) or (ap_start = ap_const_logic_0));
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_18)
    begin
        if (ap_sig_18) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_output_axis_TREADY_assign_proc : process(output_axis_TREADY, ap_reg_ioackin_output_axis_TREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_output_axis_TREADY)) then 
            ap_sig_ioackin_output_axis_TREADY <= output_axis_TREADY;
        else 
            ap_sig_ioackin_output_axis_TREADY <= ap_const_logic_1;
        end if; 
    end process;


    input_axis_TDATA_blk_n_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, input_axis_TVALID)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
            input_axis_TDATA_blk_n <= input_axis_TVALID;
        else 
            input_axis_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_axis_TREADY_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_76, ap_sig_ioackin_output_axis_TREADY)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_sig_76 or (ap_const_logic_0 = ap_sig_ioackin_output_axis_TREADY))))) then 
            input_axis_TREADY <= ap_const_logic_1;
        else 
            input_axis_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    output_axis_TDATA <= 
        tmp_3_fu_89_p1 when (storemerge_fu_93_p0(0) = '1') else 
        ap_const_lv16_0;

    output_axis_TDATA_blk_n_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, output_axis_TREADY)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
            output_axis_TDATA_blk_n <= output_axis_TREADY;
        else 
            output_axis_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    output_axis_TVALID_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_76, ap_reg_ioackin_output_axis_TREADY)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_76) and (ap_const_logic_0 = ap_reg_ioackin_output_axis_TREADY))) then 
            output_axis_TVALID <= ap_const_logic_1;
        else 
            output_axis_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    storemerge_fu_93_p0 <= (0=>enable_flag, others=>'-');
    tmp_1_fu_77_p2 <= std_logic_vector(shift_right(signed(tmp_fu_73_p1),to_integer(unsigned('0' & shift_val(31-1 downto 0)))));
    tmp_2_fu_83_p2 <= std_logic_vector(unsigned(sum_val) + unsigned(tmp_1_fu_77_p2));
    tmp_3_fu_89_p1 <= tmp_2_fu_83_p2(16 - 1 downto 0);
        tmp_fu_73_p1 <= std_logic_vector(resize(signed(input_axis_TDATA),32));

end behav;
